package Formularios;


import java.awt.Color;
import java.util.Random;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import static java.lang.Math.random;
import static java.lang.StrictMath.random;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static jdk.nashorn.internal.objects.NativeMath.random;
import jssc.SerialPort;
import static jssc.SerialPort.MASK_RXCHAR;
import jssc.SerialPortEvent;
import jssc.SerialPortException;
import jssc.SerialPortList;
/**
 *
 * @author Victor
 */
public class Principal extends javax.swing.JFrame {

    //Variables globales
    SerialPort sp = null;
    ObservableList<String> puertosDisponibles;
    int idPuerto;
    String nombrePuerto;
    int i;
    JButton[][] Botones;
    int TamX = 0;
    int TamY = 0;
    Color colorCarta;
    String numeroCarta;
    String mediaTrama;
    static final int TableroX = 500;
    static final int TableroY = 500;

    private void detectarPuertos(){
        //Esta función nos permite detectar los puerto COM disponibles en nuestra PC
        //para luego ser agregados a nustro jListBox
        //Nota: Los puertos COM los pueden crear con EltimaSerialPort
        puertosDisponibles = FXCollections.observableArrayList();
        String[] serialPortNames = SerialPortList.getPortNames();
        for(String name: serialPortNames){
            System.out.println(name);
            puertosDisponibles.add(name);
            listaPuertos.addItem(name);//Aquí agregamos los item a nuestro jListBox
        }
    }
    
    public Principal() {
        initComponents();
        detectarPuertos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaPuertos = new javax.swing.JComboBox<>();
        botonConDes = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rx = new javax.swing.JTextArea();
        Cartas = new javax.swing.JPanel();
        Tablero = new javax.swing.JPanel();
        botonIni = new javax.swing.JButton();
        tx = new javax.swing.JTextField();
        botonEnviar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonConDes.setText("Conectar");
        botonConDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConDesActionPerformed(evt);
            }
        });

        rx.setColumns(20);
        rx.setRows(5);
        jScrollPane2.setViewportView(rx);

        javax.swing.GroupLayout CartasLayout = new javax.swing.GroupLayout(Cartas);
        Cartas.setLayout(CartasLayout);
        CartasLayout.setHorizontalGroup(
            CartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CartasLayout.setVerticalGroup(
            CartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout TableroLayout = new javax.swing.GroupLayout(Tablero);
        Tablero.setLayout(TableroLayout);
        TableroLayout.setHorizontalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        TableroLayout.setVerticalGroup(
            TableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        botonIni.setText("Iniciar Partida");
        botonIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIniActionPerformed(evt);
            }
        });

        tx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txActionPerformed(evt);
            }
        });

        botonEnviar.setText("Enviar trama");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });

        jButton1.setText("Borrar buffer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tablero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Cartas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(listaPuertos, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonConDes))
                            .addComponent(botonIni)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonEnviar)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                            .addComponent(tx))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(listaPuertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonConDes)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(tx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEnviar)
                    .addComponent(botonIni))
                .addGap(10, 10, 10)
                .addComponent(Cartas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonConDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConDesActionPerformed

        //En el evento de este botón nos conectamos a el puerto COM seleccionado
        switch(botonConDes.getText()){
            case "Conectar":
            idPuerto=listaPuertos.getSelectedIndex()+1;
            nombrePuerto="COM"+String.valueOf(idPuerto);
            System.out.println(nombrePuerto);
            boolean conn=ConectarHardware(nombrePuerto);// Si la variable "conn= true" es por que se realizó la conexión

            if (conn==true) {
                botonConDes.setText("Desconectar");
                listaPuertos.setEnabled(false);

            } else {
                botonConDes.setText("Conectar");
                listaPuertos.setEnabled(true);
            }
            break;
            case "Desconectar":
            desconectar();
            botonConDes.setText("Conectar");
            listaPuertos.setEnabled(true);
            break;
        }
    }//GEN-LAST:event_botonConDesActionPerformed

    private void botonIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIniActionPerformed
        
            ArrayList<Color> colors = new ArrayList<>();
            
            colors.add(Color.YELLOW);
            colors.add(Color.BLUE);
            colors.add(Color.RED);
            colors.add(Color.BLACK);
            
            ArrayList<String> cartas = new ArrayList<>();
            
            cartas.add("1");
            cartas.add("2");
            cartas.add("3");
            cartas.add("4");
            cartas.add("5");
            cartas.add("6");
            cartas.add("7");
            cartas.add("8");
            cartas.add("9");
            cartas.add("10");
            cartas.add("11");
            cartas.add("12");
            cartas.add("13");
            cartas.add("J");
            
            Random rnd = new Random();
            Botones = new JButton[1][14];
            Cartas.setLayout(new GridLayout(1, 14));
            TamBotones(1,14);
                        //Se declaran los contadores a utilizar
            int contadorX, contadorY;
            //Se recorre la dimension X desde 0 hasta DimensionX
            for (contadorX = 0; contadorX < 1; contadorX++)
            {
                //Se recorre la dimension Y desde 0 hasta DimensionY
                for (contadorY = 0; contadorY < 14; contadorY++)
                {
                    //Se crea un nuevo objeto de tipo JButton
                    JButton btnNuevo = new JButton();
                    Color randomColor = colors.get(rnd.nextInt(colors.size()));
                    btnNuevo.setBackground(randomColor);
                    //Se le asignan sus dimensiones (ancho, alto)
                    btnNuevo.setSize(TamX, TamY);
                    
                    String randomCarta = cartas.get(rnd.nextInt(cartas.size()));
                    btnNuevo.setText(randomCarta);
                    //Se asigna un texto con la posición del botón en la matriz al botón, al tooltip del botón
                    btnNuevo.setToolTipText(Integer.toString(contadorX) + "," + Integer.toString(contadorY));
                    //Se agrega a la matriz el botón recien creado
                    Botones[contadorX][contadorY] = btnNuevo;
                    //Se agrega un nuevo evento que maneje la acción clic sobre el botón creado
                    Botones[contadorX][contadorY].addActionListener(new ActionListener() 
                    { 
                        public void actionPerformed(ActionEvent e) { 
                            ClickCarta(btnNuevo, randomColor, randomCarta);
                            
                        } 
                    });
                    //Se agrega al panel 
                    Cartas.add(Botones[contadorX][contadorY]);
                    //Se redibuja el panel
                    RedibujarCartas();
                }//Fin For - Y
            }//Fin For - X
            
            Botones = new JButton[8][16];
            //Se settea el tamaño de gridLayout de nuestro panel del tablero
            Tablero.setLayout(new GridLayout(8,16));
            //Se obtiene el tamaño de los botones acorde a su cantidad
            TamBotones(8,16);
            //Se recorre la dimension X desde 0 hasta DimensionX
            for (contadorX = 0; contadorX < 8; contadorX++)
            {
                //Se recorre la dimension Y desde 0 hasta DimensionY
                for (contadorY = 0; contadorY < 16; contadorY++)
                {
                    //Se crea un nuevo objeto de tipo JButton
                    JButton btnNuevo = new JButton();
                    //Se le asignan sus dimensiones (ancho, alto)
                    btnNuevo.setSize(TamX, TamY);
                    //Se asigna un texto con la posición del botón en la matriz al botón, al tooltip del botón
                    btnNuevo.setToolTipText(Integer.toString(contadorX) + "," + Integer.toString(contadorY));
                    //Se agrega a la matriz el botón recien creado
                    Botones[contadorX][contadorY] = btnNuevo;
                    int x = contadorX; 
                    int y = contadorY;
                    //Se agrega un nuevo evento que maneje la acción clic sobre el botón creado
                    Botones[contadorX][contadorY].addActionListener(new ActionListener() 
                    { 
                        public void actionPerformed(ActionEvent e) { 
                            Click(btnNuevo, x, y);
                        } 
                    }); 
                    //Se agrega al panel 
                    Tablero.add(Botones[contadorX][contadorY]);
                    //Se redibuja el panel
                    RedibujarTablero();
                }//Fin For - Y
            }//Fin For - X
            
            botonIni.setEnabled(false);
    }//GEN-LAST:event_botonIniActionPerformed

    private void txActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txActionPerformed

    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
        // TODO add your handling code here:
        //En este evento realizamos la escritura en el puerto serial
        if(sp != null){//Verificamos que estamos conectados a el puerto serial
            try {
                sp.writeString(tx.getText());//Aqui realizamos a escritura en el puerto serial
                //Enviamos lo que se encuentre en el jTextField, que se llama tx

            } catch (SerialPortException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("Se ha enviado el dato "+ tx.getText());

        }else{
            System.out.println("arduinoPort not connected!");
        }
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        rx.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void TamBotones(int cantX, int cantY)
    {
        TamX = TableroX/cantX;
        TamY = TableroY/cantY;
    }
    
    private void RedibujarTablero()
    {
        //Se valida los componentes del elemento pnlTablero
        Tablero.validate();
        //Se redibuja el elemento pnlTablero y sus componentes hijos
        Tablero.repaint();
    }
    
    private void RedibujarCartas(){
        Cartas.validate();
        Cartas.repaint();
    }
    
    public String convertirBinario(int decimal){
        String binario;
        
        if(decimal == 1)
            binario = "0001";
        else if(decimal == 2)
            binario = "0010";
        else if(decimal == 3)
            binario = "0011";
        else if(decimal == 4)
            binario = "0100";
        else if(decimal == 5)
            binario = "0101";
        else if(decimal == 6)
            binario = "0110";
        else if(decimal == 7)
            binario = "0111";
        else if(decimal == 8)
            binario = "1000";
        else if(decimal == 9)
            binario = "1001";
        else if(decimal == 10)
            binario = "1010";
        else if(decimal == 11)
            binario = "1011";
        else if(decimal == 12)
            binario = "1100";
        else if(decimal == 13)
            binario = "1101";
        else if(decimal == 14)
            binario = "1110";
        else if(decimal == 15)
            binario = "1111";
        else
            binario = "0000";
        
        return binario;
    }
    
    private void Click(JButton btn, int posX, int posY)
    {
        String binarioX = convertirBinario(posX);
        String binarioY = convertirBinario(posY);
        String informacion = binarioX + binarioY + " 00000000";
        mediaTrama += " " + informacion;
        tx.setText(mediaTrama);
        btn.setBackground(colorCarta);
        btn.setText(numeroCarta);
    }
    
    private void ClickCarta(JButton btn, Color randomColor, String randomCarta)
    {
        btn.setEnabled(false);
        colorCarta = randomColor;
        numeroCarta = randomCarta;
        
        if(randomColor == Color.YELLOW){
            if(randomCarta == "1")
                mediaTrama = "00000000 00010000";
                tx.setText(mediaTrama);
            if(randomCarta == "2")
                mediaTrama = "00000000 00100000";
                tx.setText(mediaTrama);
            if(randomCarta == "3")
                mediaTrama = "00000000 00110000";
                tx.setText(mediaTrama);
            if(randomCarta == "4")
                mediaTrama = "00000000 01000000";
                tx.setText(mediaTrama);
            if(randomCarta == "5")
                mediaTrama = "00000000 01010000";
                tx.setText(mediaTrama);
            if(randomCarta == "6")
                mediaTrama = "00000000 01100000";
                tx.setText(mediaTrama);
            if(randomCarta == "7")
                mediaTrama = "00000000 01110000";
                tx.setText(mediaTrama);
            if(randomCarta == "8")
                mediaTrama = "00000000 10000000";
                tx.setText(mediaTrama);
            if(randomCarta == "9")
                mediaTrama = "00000000 10010000";
                tx.setText(mediaTrama);
            if(randomCarta == "10")
                mediaTrama = "00000000 10100000";
                tx.setText(mediaTrama);
            if(randomCarta == "11")
                mediaTrama = "00000000 10110000";
                tx.setText(mediaTrama);
            if(randomCarta == "12")
                mediaTrama = "00000000 11000000";
                tx.setText(mediaTrama);
            if(randomCarta == "13")
                mediaTrama = "00000000 11010000";
                tx.setText(mediaTrama);
            if(randomCarta == "J")
                mediaTrama = "00000000 11100000";
                tx.setText(mediaTrama);
        }
        
        if(randomColor == Color.BLUE){
            if(randomCarta == "1")
                mediaTrama = "00000000 00010001";
                tx.setText(mediaTrama);
            if(randomCarta == "2")
                mediaTrama = "00000000 00100001";
                tx.setText(mediaTrama);
            if(randomCarta == "3")
                mediaTrama = "00000000 00110001";
                tx.setText(mediaTrama);
            if(randomCarta == "4")
                mediaTrama = "00000000 01000001";
                tx.setText(mediaTrama);
            if(randomCarta == "5")
                mediaTrama = "00000000 01010001";
                tx.setText(mediaTrama);
            if(randomCarta == "6")
                mediaTrama = "00000000 01100001";
                tx.setText(mediaTrama);
            if(randomCarta == "7")
                mediaTrama = "00000000 01110001";
                tx.setText(mediaTrama);
            if(randomCarta == "8")
                mediaTrama = "00000000 10000001";
                tx.setText(mediaTrama);
            if(randomCarta == "9")
                mediaTrama = "00000000 10010001";
                tx.setText(mediaTrama);
            if(randomCarta == "10")
                mediaTrama = "00000000 10100001";
                tx.setText(mediaTrama);
            if(randomCarta == "11")
                mediaTrama = "00000000 10110001";
                tx.setText(mediaTrama);
            if(randomCarta == "12")
                mediaTrama = "00000000 11000001";
                tx.setText(mediaTrama);
            if(randomCarta == "13")
                mediaTrama = "00000000 11010001";
                tx.setText(mediaTrama);
            if(randomCarta == "J")
                mediaTrama = "00000000 11100001";
                tx.setText(mediaTrama);
        }
        
        if(randomColor == Color.RED){
            if(randomCarta == "1")
                mediaTrama = "00000000 00010010";
                tx.setText(mediaTrama);
            if(randomCarta == "2")
                mediaTrama = "00000000 00100010";
                tx.setText(mediaTrama);
            if(randomCarta == "3")
                mediaTrama = "00000000 00110010";
                tx.setText(mediaTrama);
            if(randomCarta == "4")
                mediaTrama = "00000000 01000010";
                tx.setText(mediaTrama);
            if(randomCarta == "5")
                mediaTrama = "00000000 01010010";
                tx.setText(mediaTrama);
            if(randomCarta == "6")
                mediaTrama = "00000000 01100010";
                tx.setText(mediaTrama);
            if(randomCarta == "7")
                mediaTrama = "00000000 01110010";
                tx.setText(mediaTrama);
            if(randomCarta == "8")
                mediaTrama = "00000000 10000010";
                tx.setText(mediaTrama);
            if(randomCarta == "9")
                mediaTrama = "00000000 10010010";
                tx.setText(mediaTrama);
            if(randomCarta == "10")
                mediaTrama = "00000000 10100010";
                tx.setText(mediaTrama);
            if(randomCarta == "11")
                mediaTrama = "00000000 10110010";
                tx.setText(mediaTrama);
            if(randomCarta == "12")
                mediaTrama = "00000000 11000010";
                tx.setText(mediaTrama);
            if(randomCarta == "13")
                mediaTrama = "00000000 11010010";
                tx.setText(mediaTrama);
            if(randomCarta == "J")
                mediaTrama = "00000000 11100010";
                tx.setText(mediaTrama);
        }
        
        if(randomColor == Color.BLACK){
            if(randomCarta == "1")
                mediaTrama = "00000000 00010011";
                tx.setText(mediaTrama);
            if(randomCarta == "2")
                mediaTrama = "00000000 00100011";
                tx.setText(mediaTrama);
            if(randomCarta == "3")
                mediaTrama = "00000000 00110011";
                tx.setText(mediaTrama);
            if(randomCarta == "4")
                mediaTrama = "00000000 01000011";
                tx.setText(mediaTrama);
            if(randomCarta == "5")
                mediaTrama = "00000000 01010011";
                tx.setText(mediaTrama);
            if(randomCarta == "6")
                mediaTrama = "00000000 01100011";
                tx.setText(mediaTrama);
            if(randomCarta == "7")
                mediaTrama = "00000000 01110011";
                tx.setText(mediaTrama);
            if(randomCarta == "8")
                mediaTrama = "00000000 10000011";
                tx.setText(mediaTrama);
            if(randomCarta == "9")
                mediaTrama = "00000000 10010011";
                tx.setText(mediaTrama);
            if(randomCarta == "10")
                mediaTrama = "00000000 10100011";
                tx.setText(mediaTrama);
            if(randomCarta == "11")
                mediaTrama = "00000000 10110011";
                tx.setText(mediaTrama);
            if(randomCarta == "12")
                mediaTrama = "00000000 11000011";
                tx.setText(mediaTrama);
            if(randomCarta == "13")
                mediaTrama = "00000000 11010011";
                tx.setText(mediaTrama);
            if(randomCarta == "J")
                mediaTrama = "00000000 11100011";
                tx.setText(mediaTrama);
        }
    }
    
    public void colocarCarta(String z){
        String trama[] = z.split("");
        
        String numero = trama[9] + trama[10] + trama[11] + trama[12];
        System.out.print(numero);
        String aux = trama[13] + trama[14] + trama[15] + trama[16];
        String aux1 = trama[18] + trama[19] + trama[20] + trama[21];
        String aux2 = trama[22] + trama[23] + trama[24] + trama[25];
        
        int color = Integer.parseInt(aux);
        int posX = Integer.parseInt(aux1);
        int posY = Integer.parseInt(aux2);
        
        JButton btnNuevo = new JButton();
        
        if(color == 0000){
            btnNuevo.setBackground(Color.YELLOW);         
        }
        else if(color == 0001){
            btnNuevo.setBackground(Color.BLUE); 
        }
        else if(color == 0010){
            btnNuevo.setBackground(Color.RED);
        }
        else{
            btnNuevo.setBackground(Color.BLACK);
        }
        
            btnNuevo.setSize(TamX, TamY);
            btnNuevo.setText(numero);
            Botones = new JButton[8][16];
            Botones[posX][posY] = btnNuevo;
            Botones[posX][posY].addActionListener(new ActionListener() 
                    { 
                        @Override
                        public void actionPerformed(ActionEvent e) { 
                            Click(btnNuevo, posX, posY);
                        } 
                    }); 
                    //Se agrega al panel 
                    Tablero.add(Botones[posX][posY]);
            RedibujarTablero();
    }
    
    public boolean ConectarHardware(String port){
        //Esta es la función que nos permite conectarnos a puerto serial,
        //para esto tenemos que enviarle el nombre del puerto seleccionado
        System.out.println("Conectado al puerto:"+ " " + port);        
        boolean success = false;
        
        //Aqui configuramos los parámtros del puerto serial
        SerialPort serialPort = new SerialPort(port);
        try {
            serialPort.openPort();
            serialPort.setParams(
                    SerialPort.BAUDRATE_9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE);
            serialPort.setEventsMask(MASK_RXCHAR);
            serialPort.addEventListener((SerialPortEvent serialPortEvent) -> {
                if(serialPortEvent.isRXCHAR()){
                    try {
                        //Aqui realizamos la lectura del puerto COM
                        String st = serialPort.readString();
                        rx.append(st);
                        colocarCarta(st);
                    } catch (SerialPortException ex) {
                        Logger.getLogger(Principal.class.getName())
                                .log(Level.SEVERE, null, ex);
                        System.out.println("No se pudo recibir el dato");
                    }
                }
            });
            
            sp = serialPort;
            success = true;
        } catch (SerialPortException ex) {
            Logger.getLogger(Principal.class.getName())
                    .log(Level.SEVERE, null, ex);
            System.out.println("Error al tratar de conectarse al puerto"+ port);
            JOptionPane.showMessageDialog(null,"No se pudo realizar la conexión, por favor seleccione otro puerto:"+ " " + port );
        }
        return success;
    }
    
    public void desconectar(){
        //Esta función es la que utilizamos para desconectarnos del puerto COM
        if(sp != null){//Verificamos si estamos conectados
            try {
                sp.removeEventListener();
                if(sp.isOpened()){
                    sp.closePort();
        System.out.println("Se ha desconectado del puerto exitosamente");
                }
                
                sp = null;
            } catch (SerialPortException ex) {
                Logger.getLogger(Principal.class.getName())
                        .log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Cartas;
    private javax.swing.JPanel Tablero;
    private javax.swing.JButton botonConDes;
    private javax.swing.JButton botonEnviar;
    private javax.swing.JButton botonIni;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> listaPuertos;
    private javax.swing.JTextArea rx;
    private javax.swing.JTextField tx;
    // End of variables declaration//GEN-END:variables
}
